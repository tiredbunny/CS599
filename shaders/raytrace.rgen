#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64  : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : enable

#include "shared_structs.h"

// The ray payload, attached to a ray; used to communicate between shader stages.
layout(location=0) rayPayloadEXT RayPayload payload;

// Push constant for ray tracing shaders
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

// Ray tracing descriptor set: 0:acceleration structure, and 1: color output image
layout(set=0, binding=0) uniform accelerationStructureEXT topLevelAS;
layout(set=0, binding=1, rgba32f) uniform image2D colCurr; // Output image: m_rtColCurrBuffer

// Object model descriptor set: 0: matrices, 1:object buffer addresses, 2: texture list
layout(set=1, binding=0) uniform _MatrixUniforms { MatrixUniforms mats; };
layout(set=1, binding=1, scalar) buffer ObjDesc_ { ObjDesc i[]; } objDesc;
layout(set=1, binding=2) uniform sampler2D textureSamplers[];

// Object buffered data; dereferenced from ObjDesc addresses
layout(buffer_reference, scalar) buffer Vertices {Vertex v[]; }; // Position, normals, ..
layout(buffer_reference, scalar) buffer Indices {ivec3 i[]; }; // Triangle indices
layout(buffer_reference, scalar) buffer Materials {Material m[]; }; // Array of all materials
layout(buffer_reference, scalar) buffer MatIndices {int i[]; }; // Material ID for each triangle


void main() 
{
    // This invocation is for a pixel indicated by gl_LaunchIDEXT
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 pixelNDC = pixelCenter/vec2(gl_LaunchSizeEXT.xy)*2.0 - 1.0;
 
    vec3 eyeW    = (mats.viewInverse * vec4(0, 0, 0, 1)).xyz;
    vec4 pixelH = mats.viewInverse * mats.projInverse * vec4(pixelNDC.x, pixelNDC.y, 1, 1);
    vec3 pixelW = pixelH.xyz/pixelH.w;
    
    vec3 rayOrigin    = eyeW;
    vec3 rayDirection = normalize(pixelW - eyeW);

    // Fire the ray;  hit or miss shaders will be invoked, passing results back in the payload
    traceRayEXT(topLevelAS,           // acceleration structure
                gl_RayFlagsOpaqueEXT, // rayFlags
                0xFF,                 // cullMask
                0,                    // sbtRecordOffset
                0,                    // sbtRecordStride
                0,                    // missIndex
                rayOrigin,            // ray origin
                0.001,                // ray min range
                rayDirection,         // ray direction
                10000.0,              // ray max range
                0                     // payload (location = 0)
                );

    // If nothing was hit, output background color.
    if (!payload.hit) {
        imageStore(colCurr, ivec2(gl_LaunchIDEXT.xy), vec4(0.0));
        return; }

    // If something was hit, find the object data.
    // Object data (containg 4 device addresses)
    ObjDesc    objResources = objDesc.i[payload.instanceIndex];
    
    // Dereference the object's 4 device addresses
    Vertices   vertices    = Vertices(objResources.vertexAddress);
    Indices    indices     = Indices(objResources.indexAddress);
    Materials  materials   = Materials(objResources.materialAddress);
    MatIndices matIndices  = MatIndices(objResources.materialIndexAddress);
  
    // Use gl_PrimitiveID to access the triangle's vertices and material
    ivec3 ind    = indices.i[payload.primitiveIndex]; // The triangle hit
    int matIdx   = matIndices.i[payload.primitiveIndex]; // The triangles material index
    Material mat = materials.m[matIdx]; // The triangles material

    // Vertex of the triangle (Vertex has pos, nrm, tex)
    Vertex v0 = vertices.v[ind.x];
    Vertex v1 = vertices.v[ind.y];
    Vertex v2 = vertices.v[ind.z];

    // Computing the normal and tex coord at hit position
    const vec3 bc = payload.bc; // The barycentric coordinates of the hit point
    const vec3 nrm  = bc.x*v0.nrm      + bc.y*v1.nrm      + bc.z*v2.nrm;
    const vec2 uv =  bc.x*v0.texCoord + bc.y*v1.texCoord + bc.z*v2.texCoord;

    // If the material has a texture, read diffuse color from it.
    if (mat.textureId >= 0) {
        uint txtId = objResources.txtOffset + mat.textureId;
        mat.diffuse = texture(textureSamplers[(txtId)], uv).xyz;
    }

    // If material indicates triangle is a light, output its emission.
    if (dot(mat.emission,mat.emission) > 0.0) {
        imageStore(colCurr, ivec2(gl_LaunchIDEXT.xy), vec4(mat.emission,1.0));
        return; }

    // Color via a BRDF calculation
    // @@ Do your lighting calculation here.
    //   Normal N from nrm above 
    //   Light direction L from pcRay.tempLightPos - payload.hitPos
    //   View direction V is the reverse of rayDirection
    //   Light values from pcRay
    //   Material properties from mat (above), possibly modified by a texture
    vec3 C = vec3(1.0, 0.5, 0.0); 

    imageStore(colCurr, ivec2(gl_LaunchIDEXT.xy), vec4(C, 1.0));

}
